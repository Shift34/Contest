Фирма Vozug&Ko - всемирно известная фирма, организованная студентами математического факультета ЯрГУ. 
Заказчики ценят Vozug&Ko за надёжную и безошибочную работу: ещё ни разу их программы не выдавали никаких ошибок. 
Более того, программисты из фирмы Vozug&Ko готовы выполнить практически любой каприз заказчика: от консольных приложений до сложных систем виртуальной реальности.

Заказов у фирмы Vozug&Ko - целая куча. Но, какими бы прекрасными ни были работники фирмы, они - очень ленивые. 
Чтобы хоть как-то разгрести завал с заказами, топ-менеджер решил ввести уровни для заказчиков: серебряный, золотой и платиновый. 
Серебряный статус получают заказчики, у которых в листе заказов более одного заказа, золотой - заказчики, у которых в листе заказов более четверти от текущего числа заказов, платиновый - заказчики, у которых в листе заказов более половины от текущего числа заказов (такой клиент - всегда один). 
Вы скажете - да это просто рекламный ход! Но, как оказалось, от статуса клиента зависит скорость выполнения задач, которые он поставил. 
Первым всегда будут делать заказы от платинового клиента (пока он не лишился этого статуса), затем - золотого и т.д. 
И ещё: платиновые клиенты при посещени офиса фирмы на ул. Свободы получают бесплатные чай, кофе и печеньки.

Ваш одногруппник решил пойти работать в Vozug&Ko стажёром. Ему на собеседовании дали задание: определить клиента, который имеет платиновый статус. 
Так как ваш одногруппник плохо решал контесты, он обратился за помощью к вам.

Помогите вашему одногруппнику! Определите из списка заказов клиента с платиновым статустом!

Формат ввода
В первой строке входного файла дано число N - количество заказов у фирмы Vozug&Ko (2 ≤ N ≤ 10000). 
Во второй строке входного файла находится N чисел ai - номера клиентов фирмы, разместивших заказ (1 ≤ ai ≤ 10000)

Формат вывода
Выведите единственное число - номер клиента с платиновым статусом. Если же клиента с платиновым статусом нет, то выведите 0




using System;

namespace ConsoleApp75
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            int[] nn = new int[n];
            int count = 1;
            int max = (n+1) / 2;

            int w = 0;
            int s = 0;
            int[] gg = new int[n];
            int gl = 0;
            int[] aa = new int[n];
            string[] kk = Console.ReadLine().Split();
            for (int i=0;i<n;i++)
            {
                nn[i] = int.Parse(kk[i]);
            }
            Array.Sort(nn);
            for (int i = 1; i < n; i++)
            {
                if (nn[i - 1] == nn[i])
                {
                    count += 1;
                    if (count >= max) 
                    {
                        gg[s] = nn[i - 1];
                        aa[w] = count;
                        gl = count;
                        w+=1;
                        max += 1;
                    }
                    else if (count == gl)
                    {
                        aa[w] = count;
                        w += 1;
                    }

                }
                else count = 1;
            }
            Array.Sort(aa);
            Array.Reverse(aa);
            if (w > 1)
            {
                if (aa[0] > aa[1]) Console.WriteLine(gg[s]);
                else Console.WriteLine(0);
            }
            else if (w == 1)
            {
                Console.WriteLine(gg[s]);
            }
            else Console.WriteLine(0);
            Console.ReadKey();

        }
    }
}

