Профбюро Математического факультета организовало поход на хоккей! Наш Любимый Профорг забронировал билеты на матч Локомотив - Северсталь. 
Так как желающих было много, он решил забронировать R рядов по S мест в каждом на одной из трибун Арены-2000.

Математики договорились, что после каждой забитой шайбы они будут обмениваться рукопожатиями с соседями. 
Соседями считаются зрители, которые сидят на ряд выше, на ряд ниже или на этом же ряду и которые сидят на месте либо с таким же номером, либо с номером, отличающимся на единицу. 
Например, если зритель сидит на 10 месте 5-го ряда, то его соседи сидят на местах 9, 10, 11 6-го ряда, 9, 11 5-го ряда и 9, 10, 11 4-го ряда.

Денис - горячий болельщик Локомотива. Так получилось, что он опоздал на начало матча. 
Но в одном он уверен: к концу периода шайбу забьёт его любимый игрок - Брендон Козун. Естественно, с передачи Макса Тальбо. 
И он хочет отпраздновать этот момент и пожать руку как можно большему числу болельщиков из числа студентов Матфака. 
Когда Денис заходит на трибуну, он чётко видит, какие места заняты, а какие свободны, и выбирает место так, чтобы пожать руку наибольшему возможному числу соседей. 
Если же все места заняты, то он ругает Нашего Любимого Профорга и уходит из Арены-2000.

Так как Денис не хочет думать во время матча, а Наш Любимый Профорг точно знает, какие места заняты, а какие свободны, вам предстоит посчитать общее число рукопожатий после шайбы. 
Гаранитруется, что за первый период будет заброшена одна шайба (обязательно после прихода Дениса) и что после Дениса никто до конца периода не придёт.

Формат ввода
В первой строке записано два числа - R и S (1 ≤ R ≤ 50, 1 ≤ S ≤ 50). В следующих R строках по S столбцов содержится план рассадки. Число 0 означает, что место свободно, 1 - занято.

Формат вывода
Выведите единственное число - общее число рукопожатий





using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ConsoleApp89
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] filename = File.ReadAllLines("input.txt");
            string s = filename[0];
            string[] s_arr = s.Split();
            int max = 0;
            int max1 =0;
            int z = 0;
            int p = 1;
            int k = int.Parse(s_arr[0]);
            int k1 = int.Parse(s_arr[1]);
            string[] y = new string[k];
            for (int i = 0; i < k; i++)
            {
                y[i] = filename[p];
                p++;
            }
            char[] massage = new char[k1*2];
            using (StreamWriter sw = new StreamWriter("output.txt", false))
            {
                for (int i = 0; i < k; i++)
                {
                    for (int j = 0; j < k1*2-1; j++)
                    {
                        z = 0;
                        if (y[i][j] == '1')
                        {
                            if (j == 0)
                            {
                                if (i + 1 < k)
                                {
                                    if (j + 2 < k1 * 2 - 1)
                                    {
                                        if (y[i][j + 2] == '1') max += 1;
                                        if (y[i + 1][j] == '1') max += 1;
                                        if (y[i + 1][j + 2] == '1') max += 1;
                                    }
                                    if (j + 2 > k1 * 2 - 1)
                                    {
                                        if (y[i + 1][j] == '1') max += 1;
                                    }
                                }
                                if (i + 1 >= k)
                                {
                                    if (j + 2 < k1 * 2 - 1)
                                    {
                                        if (y[i][j + 2] == '1') max += 1;
                                    }
                                }
                            }
                            else
                            {
                                if (i + 1 < k)
                                {
                                    if (j + 2 < k1 * 2 - 1)
                                    {
                                        if (y[i][j + 2] == '1') max += 1;
                                        if (y[i + 1][j] == '1') max += 1;
                                        if (y[i + 1][j + 2] == '1') max += 1;
                                        if (y[i + 1][j - 2] == '1') max += 1;
                                    }
                                    if (j + 2 > k1 * 2 - 1)
                                    {
                                        if (y[i + 1][j] == '1') max += 1;
                                        if (y[i + 1][j - 2] == '1') max += 1;
                                    }
                                }
                                if (i + 1 >= k)
                                {
                                    if (j + 2 < k1 * 2 - 1)
                                    {
                                        if (y[i][j + 2] == '1') max += 1;
                                    }
                                }
                            }
                        }
                        if (y[i][j] == '0')
                        {
                            if (j == 0)
                            {
                                if (i == 0)
                                {
                                    if (i + 1 < k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i + 1][j + 2] == '1') z += 1;
                                        }
                                        if (j + 2 > k1 * 2 - 1)
                                        {
                                            if (y[i + 1][j] == '1') z += 1;
                                        }
                                    }
                                    if (i + 1 >= k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                        }
                                    }
                                }
                                else
                                {
                                    if (i + 1 < k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i + 1][j + 2] == '1') z += 1;
                                            if (y[i -1][j + 2] == '1') z += 1;
                                            if (y[i -1][j] == '1') z += 1;
                                        }
                                        if (j + 2 > k1 * 2 - 1)
                                        {
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i -1][j] == '1') z += 1;
                                        }
                                    }
                                    if (i + 1 >= k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (i == 0)
                                {
                                    if (i + 1 < k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i + 1][j + 2] == '1') z += 1;
                                            if (y[i + 1][j - 2] == '1') z += 1;
                                            if (y[i][j - 2] == '1') z += 1;
                                        }
                                        if (j + 2 > k1 * 2 - 1)
                                        {
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i + 1][j - 2] == '1') z += 1;
                                            if (y[i + 1][j - 2] == '1') z += 1;
                                        }
                                    }
                                    if (i + 1 >= k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                            if (y[i][j - 2] == '1') z += 1;
                                        }
                                    }
                                }
                                else
                                {
                                    if (i + 1 < k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i + 1][j + 2] == '1') z += 1;
                                            if (y[i - 1][j + 2] == '1') z += 1;
                                            if (y[i - 1][j] == '1') z += 1;
                                            if (y[i - 1][j-2] == '1') z += 1;
                                            if (y[i ][j-2] == '1') z += 1;
                                            if (y[i + 1][j-2] == '1') z += 1;
                                        }
                                        if (j + 2 > k1 * 2 - 1)
                                        {
                                            if (y[i + 1][j] == '1') z += 1;
                                            if (y[i - 1][j] == '1') z += 1;
                                            if (y[i - 1][j - 2] == '1') z += 1;
                                            if (y[i][j - 2] == '1') z += 1;
                                            if (y[i + 1][j - 2] == '1') z += 1;
                                        }
                                    }
                                    if (i + 1 >= k)
                                    {
                                        if (j + 2 < k1 * 2 - 1)
                                        {
                                            if (y[i][j + 2] == '1') z += 1;
                                            if (y[i-1][j + 2] == '1') z += 1;
                                            if (y[i-1][j] == '1') z += 1;
                                            if (y[i][j-2] == '1') z += 1;
                                            if (y[i-1][j - 2] == '1') z += 1;
                                        }
                                        if (j + 2 > k1 * 2 - 1)
                                        {
                                            if (y[i - 1][j] == '1') z += 1;
                                            if (y[i][j - 2] == '1') z += 1;
                                            if (y[i - 1][j - 2] == '1') z += 1;
                                        }
                                    }
                                }
                            }
                        }
                        j++;
                        if (z > max1) max1 = z;
                    }
                }
            }
            int xz = max + max1;
            using (StreamWriter sw = new StreamWriter("output.txt", false))
            {
                sw.Write(xz);
            }
        }
    }
}
