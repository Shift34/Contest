На главный сервер компании Гомбл недавно пришёл лог одного сверхсекретного процесса даже название которого не разрешено разглашать. 
Лог был записан в формате «[дата:время]: сообщение», где для каждого значения «[дата:время]» существовало не более 10 строк. 
Все файлы были зашифрованы сверхсложным способом и расшифровать их мог только программист Леша. 
Шифр был настолько сложен, что Леше понадобилось четыре недели на их расшифровку. Сразу после расшифровки все файлы были уничтожены. 
И только после удаления файлов Леша заметил, что он сохранял записи в формате «[время]: сообщение». 
Таким образом, информация о датах была утеряна. 
Однако так как строки добавлялись в лог в хронологическом порядке, то, например, несложно сделать вывод о том, могли ли все записи появиться в течение одних суток. 
Также можно определить минимальное количество суток, в которые лог мог быть записан.

Теперь чтобы хоть как-то оправдать себя перед начальством Леша должен узнать какое минимальное число суток затрагивают логи. 
Заметим, что Леше требуется найти не количество суток между началом и концом журналирования, а количество суток, в которые производились записи (см. пример 2).

Напомним, что за минуту процесс производил не более 10 записей. Считайте, что полночь принадлежит наступающим суткам.

Формат ввода
Первая строка файла содержит число n (1 ≤ n ≤ 100). Следующие n строк содержат записи в «[время]: сообщение»: сообщение, где время задаётся в формате «hh:mm x.m.». 
В качестве hh используются двухзначные числа от 01 до 12, а в качестве mm используются двухзначные числа от 00 до 59, а x это либо символ «a», либо «p». 
Сообщение — это непустая последовательность латинских букв и/или пробелов, которая не начинается и не заканчивается пробелом. Длина каждого сообщения не превосходит 20.

Формат вывода
Выведите одно число — минимальное количество суток, затрагиваемых записями.




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ConsoleApp88
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] filename = File.ReadAllLines("input.txt");
            int max = 1;
            int r = 1;
            int k = Convert.ToInt32(filename[0]);
            string[] y = new string[k];
            int p = 1;
            for (int i = 0; i < k; i++)
            {
                y[i] = filename[p];
                p++;
            }
            char[] massage = new char[100];
            for (int j = 1; j < k; j++)
            {
                if (y[j][7] == y[j - 1][7])
                {
                    string t = y[j].Substring(1, 2);
                    string t1 = y[j - 1].Substring(1, 2);
                    int f = Convert.ToInt32(t);
                    int f1 = Convert.ToInt32(t1);
                    if (y[j][7] == 'a')
                    {
                        if (f == 12) f = 00;
                        if (f1 == 12) f1 = 00;
                    }
                    if (y[j][7] == 'p')
                    {
                        if (f == 12) f = 00;
                        if (f1 == 12) f1 = 00;
                    }
                    if (f1 > f)
                    {
                        max += 1;
                        r = 1;
                    }
                    else if (f1 == f)
                    {
                        string q = y[j].Substring(4, 2);
                        string q1 = y[j - 1].Substring(4, 2);
                        int z = Convert.ToInt32(q);
                        int z1 = Convert.ToInt32(q1);
                        if (z1 > z)
                        {
                            max += 1;
                            r = 1;
                        }
                        else
                        {
                            r += 1;
                            if (r - 1 == 10)
                            {
                                max += 1;
                                r = 1;
                            }
                        }
                    }
                    else
                    {
                        r += 1;
                        if (r - 1 == 10)
                        {
                            max += 1;
                            r = 1;
                        }
                    }
                }
                if (y[j][7] != y[j - 1][7])
                {
                    if (y[j - 1][7] == 'p')
                    {
                        max += 1;
                        r = 1;
                    }
                }
            }
            string myString = max.ToString();
            File.WriteAllText("output.txt", myString);
            Console.ReadKey();
        }
    }
}
