Научной основой теста «Память на числа», представленного в 1996 году Э. Р. Ахмеджановым, стали работы американского психолога, профессора Принстонского университета Джорджа Миллера (1920–2012). 
Самая известная его книга — «Магическое число семь плюс-минус два». Она опубликована в 1956 году.

Изучая параметры кратковременной памяти операторов телефонной компании, Дж. Миллер установил, что после непродолжительного просмотра человек может точно воспроизвести в среднем от пяти до девяти элементов (слов, букв, чисел).
Он остроумно сравнивал память с «кошельком», вмещающим одновременно не более девяти «монет» (семь плюс-минус две).

Опираясь на работы своего предшественника, Э. Р. Ахмеджанов разработал тест, предназначенный для определения объёма и точности кратковременной зрительной памяти.

Для тестирования используют таблицу, содержащую некоторое количество случайных чисел. 
Её несколько секунд показывают испытуемому, чтобы он мог запомнить числа и позже назвать их.

Вы должны оказать посильную помощь в автоматизации этого процесса, разработав программу для подсчёта количества совпадений в двух списках: исходной таблицы и чисел названных испытуемым.

Формат ввода
В первой строке содержится число N — количество чисел в исходной таблице. 1 ≤ N ≤ 15000. Затем идет N строк, содержащих числа таблицы, по одному числу в строке. 
Каждая строка — целое число в пределах от 1 до 109. Числа в этом списке отсортированы по неубыванию. В следующей после списка строке содержится число M — количество записей в списке испытуемого, 1 ≤ M ≤ 106. 
Затем также M строк с числами ( целое число в пределах от 1 до 109). Этот список не отсортирован. B в первом и во втором списках числа могут повторяться.

Формат вывода
Вы должны вывести одно число — количество чисел во втором списке, которые также содержатся в первом.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace z3
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            int z = 0;
            int[] ui = new int[n];
            for (int i=0;i<n;i++)
            {
                ui [i]= int.Parse(Console.ReadLine());
            }
            int f = int.Parse(Console.ReadLine());
            int[] iu = new int[f];
            for (int a = 0;a < f; a++)
            {
                iu[a] = int.Parse(Console.ReadLine());
            }
            Array.Sort(iu);
            int o = -1;
            int k = 0;
                for (int u = 0; u < n; u++)
                {
                    if (ui[u] != o)
                        for (int l = k; l < f; l++)
                        {
                        if (ui[u] < iu[l])
                        {
                            k = l;
                            break;
                        }
                        if (ui[u] == iu[l]) z += 1;
                        else continue;
                        }
                    o = ui[u];
                   
                }
            Console.WriteLine(z);
            Console.ReadKey();
        }
    }
}
