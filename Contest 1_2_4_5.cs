В языке программирования Python блоки кода не выделяются ключевыми словами begin/end или фигурными скобками. Вместо этого используются отступы.

Мы рассмотрим очень упрощенный вариант Python, с двумя типами инструкций.

Простые инструкции записываются в одной строке, по одной инструкции на строку. Примером такой инструкции является присваивание.

Циклы являются составными инструкциями: они содержат одну или несколько других инструкций. 
Цикл состоит из заголовка, записанного в отдельной строке и начинающегося с префикса "for", и тела цикла. 
Тело цикла — блок инструкций, записанных с отступом на один уровень дальше, чем заголовок цикла. Тело цикла может содержать оба типа инструкций, и не может быть пустым.

Вам дана последовательность инструкций, записанных без отступов. Найдите количество способов, которыми можно расставить отступы так, чтобы получить валидную программу.

Формат ввода
Первая строка входных данных содержит одно число N (1 ≤ N ≤ 30) — количество инструкций в программе. Следующие N строк описывают программу, по одной инструкции на строку. Каждая строка состоит из одного символа: "f" (цикл) или "s" (простая инструкция). Гарантируется, что последняя строка программы — "s".

Формат вывода
Выведите одно число — количество способов, которыми можно расставить отступы в заданной последовательности инструкций, чтобы получить валидную программу.







using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp127
{
    class Program
    {
        static public int f(int n, int k, int[,] dp, string s)
        {
            if (k < 0) return 0;
            if (n == s.Length)
            {
                if (k == 0) return 1;
                else return 0;
            }
            if (dp[n, k] != -1) return dp[n, k];
            if (s[n] == 's') 
            {
                int x = 0;
                for(int i = 0; i < k+1; i++)
                {
                    x += f(n + 1, k - i, dp, s);
                }
                return dp[n, k] = x;
            }
            return dp[n, k] = f(n + 1, k + 1, dp, s);//f
        }
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            string h = null;
            for (int i = 0; i < n; i++)
            {
                h += Console.ReadLine();
            }
            int[,] dp = new int[n, n];
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    dp[i, j] = -1;
                }
            }
            Console.WriteLine(f(0, 0, dp, h));
        }
    }
}

